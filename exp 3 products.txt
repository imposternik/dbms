EXP 3 
CREATE TABLE products (
    product_id INT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10,2) CHECK (price > 0),
    stock INT CHECK (stock >= 0)
);

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    product_id INT,
    quantity INT CHECK (quantity > 0),
    order_date DATE DEFAULT CURRENT_DATE,
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
✅ 2. Insert Sample Data
-- Insert into products
INSERT INTO products (product_id, name, price, stock) VALUES
(1, 'Samsung Smart TV', 45000.00, 10),
(2, 'iPhone 13', 65000.00, 15),
(3, 'Sony Headphones', 2500.00, 25);

-- Insert into orders
INSERT INTO orders (order_id, product_id, quantity, order_date) VALUES
(101, 1, 2, '2025-04-10'),
(102, 2, 1, '2025-04-11'),
(103, 3, 3, '2025-04-12');
✅ 3. Update the Price of One Product
UPDATE products
SET price = 47000.00
WHERE product_id = 1;
✅ 4. Delete One Order
DELETE FROM orders
WHERE order_id = 103;
✅ 5. Display Order Details with Product Info
SELECT o.order_id, o.order_date, p.name AS product_name, p.price, o.quantity
FROM orders o
JOIN products p ON o.product_id = p.product_id;
✅ 6. Total Sales per Product

SELECT p.product_id, p.name AS product_name, SUM(o.quantity * p.price) AS total_sales
FROM orders o
JOIN products p ON o.product_id = p.product_id
GROUP BY p.product_id, p.name;
✅ 7. Create and Use a Function to Calculate Total Order Value
DELIMITER //

CREATE FUNCTION GetOrderValue(in_order_id INT)
RETURNS DECIMAL(12,2)
DETERMINISTIC
BEGIN
    DECLARE total DECIMAL(12,2);
    SELECT SUM(o.quantity * p.price)
    INTO total
    FROM orders o
    JOIN products p ON o.product_id = p.product_id
    WHERE o.order_id = in_order_id;
    RETURN total;
END //

DELIMITER ;

-- Example usage:
SELECT GetOrderValue(101) AS total_value;
✅ 8. Drop All Tables
DROP TABLE orders;
DROP TABLE products;